security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\User:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            custom_authenticator: App\Security\LoginFormAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # allow unauthenticated users to access the login form
        - { path: ^/login, roles: PUBLIC_ACCESS }
          # Sécuriser toutes les routes du backoffice /add /edit /delete pour les admin
        - { path: ^/backoffice/.*/(edit|add|delete), roles: ROLE_ADMIN }
        # Sécurise les pages de listes et show du backoffice pour les managers
        #    on met la regex entre "" car elle contient une , qui est un caractère particulier en YAML
        #    on met \\d car le 1er \ sert à dire à YAML que le 2eme \ est le caractère que l'on veut saisir
        - { path: "^/backoffice/[^/]*/\\d{0,}$", roles: ROLE_MANAGER }
        # Il faut etre connecté pour ajouter une review
        - { path: "^/films/[^/]*/reviews/add", roles: ROLE_USER }
        # Tout le monde peut accéder à la page d'accueil et la page de détail d'un movie
        # - { path: ^/$, roles: ROLE_ANONYMOUS }
        # ou en plusieurs règles :
        # - { path: ^/backoffice/(genres|movies)/.*/edit, roles: ROLE_ADMIN }
        # - { path: ^/backoffice/(genres|movies)/.*/delete, roles: ROLE_ADMIN }
        # - { path: ^/backoffice/(genres|movies)/add, roles: ROLE_ADMIN }


        # - { path: ^/profile, roles: ROLE_USER }
    role_hierarchy:
        ROLE_ADMIN:   ROLE_MANAGER
       # ROLE_MANAGER: ROLE_USER
        

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
